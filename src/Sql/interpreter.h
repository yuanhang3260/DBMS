#ifndef SQL_INTERPRETER_H_
#define SQL_INTERPRETER_H_

#include <vector>

#include "scanner.h"

// autogenerated by Bison, don't panic
// if your IDE can't resolve it - call make first
#include "parser.hpp"

namespace Sql {

// This class is the interface for our scanner/lexer. The end user
// is expected to use this. It drives scanner/lexer. keeps
// parsed AST and generally is a good place to store additional
// context data. Both parser and lexer have access to it via internal 
// references.
class Interpreter {
 public:
  Interpreter();

  // Parse SQL query, return 0 in success.
  int parse();
  int parse(const std::string& str);

  std::string str() const;
  void clear();

  //Switch scanner input stream. Default is standard input (std::cin).
  void switchInputStream(std::istream *is);
  
  //This is needed so that Scanner and Parser can call some
  //methods that we want to keep hidden from the end user.
  friend class Parser;
  friend class Scanner;
    
 private:
  // Used internally by Scanner YY_USER_ACTION to update location indicator
  void increaseLocation(unsigned int loc);

  // Used to get last Scanner location. Used in error messages.
  unsigned int location() const;

  Scanner m_scanner;
  Parser m_parser;
  unsigned int m_location;  // Used by scanner
};

}  // namespace Sql

#endif  // SQL_INTERPRETER_H_
